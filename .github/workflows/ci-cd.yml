name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Frontend Build and Test
  frontend:
    name: Frontend - Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Lint code
        run: npm run lint
        continue-on-error: true
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_WALLET_CONNECT_ID: ${{ secrets.WALLET_CONNECT_ID }}
          NEXT_PUBLIC_ALCHEMY_KEY: ${{ secrets.ALCHEMY_KEY }}
          NEXT_PUBLIC_CHAIN_ID: 42161
          NEXT_PUBLIC_AI_API_URL: http://localhost:5000
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: .next/
          retention-days: 7

  # Smart Contracts Build and Test
  contracts:
    name: Contracts - Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: blockchain/package-lock.json
      
      - name: Install dependencies
        working-directory: blockchain
        run: npm ci
      
      - name: Compile contracts
        working-directory: blockchain
        run: npx hardhat compile
      
      - name: Run contract tests
        working-directory: blockchain
        run: npx hardhat test
        continue-on-error: true
      
      - name: Check gas usage
        working-directory: blockchain
        run: npx hardhat test --gas-report
        continue-on-error: true

  # AI Backend Test
  ai-backend:
    name: AI Backend - Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ai-backend/requirements.txt
      
      - name: Install dependencies
        working-directory: ai-backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Lint with flake8
        working-directory: ai-backend
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true
      
      - name: Test API endpoints
        working-directory: ai-backend
        run: python -m pytest tests/ || echo "Tests not implemented yet"
        continue-on-error: true

  # Docker Build
  docker:
    name: Docker - Build Images
    runs-on: ubuntu-latest
    needs: [frontend, contracts, ai-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: github.event_name == 'push'
      
      - name: Extract metadata
        id: meta-frontend
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/mutualchain-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/mutualchain-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/mutualchain-frontend:buildcache,mode=max
      
      - name: Extract metadata for AI backend
        id: meta-backend
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/mutualchain-ai-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push AI backend
        uses: docker/build-push-action@v4
        with:
          context: ./ai-backend
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/mutualchain-ai-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/mutualchain-ai-backend:buildcache,mode=max

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Deployment Summary
  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [frontend, contracts, ai-backend, docker]
    if: always()
    
    steps:
      - name: Check deployment status
        run: |
          echo "### Deployment Summary ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.frontend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Contracts | ${{ needs.contracts.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| AI Backend | ${{ needs.ai-backend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
